[
  {
    "path": "posts/RStudio_for_beginners/",
    "title": "Beginner session in R",
    "description": {},
    "author": [],
    "date": "2022-06-13",
    "categories": [],
    "contents": "\r\nIntroduction to the workshop\r\nWho we are\r\nThe aim of the session\r\nWhat the session involves\r\nWhat is R?\r\nR is free statistical program\r\nIt uses a computer language called S\r\nYou type in commands to get the computer to do things, rather than point and click like in programs like excel.\r\nIt’s open sourced (anyone can make new packages to provide new functions)\r\nPeople have created packages to deal with lots of different problems/analyses.\r\nBut, people might have written functions in different ways for different packages\r\nWhat does R look like?\r\nTwo main programs:‘R’ and ‘Rstudio’.\r\nRstudio is a more user-friendly environment.\r\nWhen you start Rstudio the screen is divided into 4 blocks/windows:\r\nR console\r\n\r\nHow R works\r\nThe entities that R creates and manipulates are called objects. It stores these in the R environment.\r\nR recognises each object by the name is it’s given, which can be made up of alphabetic characters and numbers.\r\nR is case-sensitive so fish and Fish are two different objects.\r\nFew symbols are allowed apart from ’_’ and ‘.’\r\nObject names can’t start with a number or ’_’ and it’s advisable not to use ‘.’ either\r\nHow R works (2)\r\nAvoid some single letter object names because R sometimes also uses them.\r\nAvoid object names that can be functions in R e.g. data.\r\nYou can create objects using ‘<-’ which is R’s version of ‘=’ (see: https://stackoverflow.com/questions/1741820/what-are-the-differences-between-and-assignment-operators-in-r for a discussion about the difference between the two)\r\n\r\n\r\nmut <- 3+ 4\r\nmut\r\n\r\n\r\n[1] 7\r\n\r\nThere are different data types in R and the type of data an object is can affect how R ‘deals’ with it.\r\nData types in R: Vector\r\nA collection of different elements which can hold different types of data\r\nNumeric vector\r\n\r\n\r\na <- c(1,2,5.3,6,-2,4) \r\na\r\n\r\n\r\n[1]  1.0  2.0  5.3  6.0 -2.0  4.0\r\n\r\nstr(a)\r\n\r\n\r\n num [1:6] 1 2 5.3 6 -2 4\r\n\r\nCharacter vector\r\n\r\n\r\nb <- c(\"one\",\"two\",\"three\") \r\nb\r\n\r\n\r\n[1] \"one\"   \"two\"   \"three\"\r\n\r\nstr(b)\r\n\r\n\r\n chr [1:3] \"one\" \"two\" \"three\"\r\n\r\nLogical vector\r\n\r\n\r\nc <- c(TRUE,TRUE,TRUE,FALSE,TRUE,FALSE) \r\nc\r\n\r\n\r\n[1]  TRUE  TRUE  TRUE FALSE  TRUE FALSE\r\n\r\nstr(c)\r\n\r\n\r\n logi [1:6] TRUE TRUE TRUE FALSE TRUE FALSE\r\n\r\nData types in R: Matrix\r\nA vector with added dimensions (must have columns and rows). All columns must have the same mode and length\r\n\r\n\r\ny<-matrix(1:20, nrow=5,ncol=4)   # generates 5 x 4 numeric matrix \r\ny\r\n\r\n\r\n     [,1] [,2] [,3] [,4]\r\n[1,]    1    6   11   16\r\n[2,]    2    7   12   17\r\n[3,]    3    8   13   18\r\n[4,]    4    9   14   19\r\n[5,]    5   10   15   20\r\n\r\nstr(y)\r\n\r\n\r\n int [1:5, 1:4] 1 2 3 4 5 6 7 8 9 10 ...\r\n\r\nData types in R: Matrix (2)\r\n\r\n\r\ns_means = matrix(c(-14, -15.1, -11.03, 3.06, 7.05, 13.72), ncol=2, nrow=3)\r\ns_means\r\n\r\n\r\n       [,1]  [,2]\r\n[1,] -14.00  3.06\r\n[2,] -15.10  7.05\r\n[3,] -11.03 13.72\r\n\r\nstr(s_means)\r\n\r\n\r\n num [1:3, 1:2] -14 -15.1 -11.03 3.06 7.05 ...\r\n\r\nData types in R: Data frame\r\nThey are more general than a matrix and can have columns which have different modes.\r\n\r\n\r\ndat <- data.frame(id = letters[1:3], x = 1:3, y = 4:6)\r\ndat\r\n\r\n\r\n  id x y\r\n1  a 1 4\r\n2  b 2 5\r\n3  c 3 6\r\n\r\nstr(dat)\r\n\r\n\r\n'data.frame':   3 obs. of  3 variables:\r\n $ id: chr  \"a\" \"b\" \"c\"\r\n $ x : int  1 2 3\r\n $ y : int  4 5 6\r\n\r\nData types in R: List\r\nAn ordered collection of objects and they can have different modes in one list\r\n\r\n\r\nw <- list(name=\"Fred\", mynumbers=a, mymatrix=y, age=5.3)\r\nstr(w)\r\n\r\n\r\nList of 4\r\n $ name     : chr \"Fred\"\r\n $ mynumbers: num [1:6] 1 2 5.3 6 -2 4\r\n $ mymatrix : int [1:5, 1:4] 1 2 3 4 5 6 7 8 9 10 ...\r\n $ age      : num 5.3\r\n\r\nData types in R: Factor\r\nYou can tell R that a variable is nominal (used for identification/labelling) by making it a factor.\r\n\r\n\r\nx <- factor(c(\"yes\", \"no\", \"no\", \"yes\", \"yes\"))\r\nx\r\n\r\n\r\n[1] yes no  no  yes yes\r\nLevels: no yes\r\n\r\nstr(x)\r\n\r\n\r\n Factor w/ 2 levels \"no\",\"yes\": 2 1 1 2 2\r\n\r\nBasic commands in R e.g. calculator\r\nOpen up Rstudio.\r\nHave a look at the different windows in R and try to understand what each window is used for. If you don’t have the top left window (R script) then you can click on the button with the blank page with the green/white plus which brings up the menu as shown below and you can click on R script and it will open a new script.\r\n\r\nOnce you are happy navigating the different windows, in the bottom left hand window (the console) try typing the following (in grey) and press enter after each line when you want an output. The output that should come up is shown in white boxes.\r\nYou can use R as a simple calculator:\r\n\r\n\r\n3 + 4\r\n\r\n\r\n[1] 7\r\n\r\nCreate an object called foo:\r\n\r\n\r\nfoo<- 3 + 4\r\n\r\n\r\n\r\nYou should see this object appear under your ‘values’ tab in your environment. See what foo looks like:\r\n\r\n\r\nfoo\r\n\r\n\r\n[1] 7\r\n\r\nCreate another object called po:\r\n\r\n\r\npo<- 8+ 5\r\n\r\n\r\n\r\nSee what po looks like:\r\n\r\n\r\npo\r\n\r\n\r\n[1] 13\r\n\r\nAdd foo and po together and create a new object, zu:\r\n\r\n\r\nzu<- foo + po\r\n\r\n\r\n\r\nSee what zu looks like:\r\n\r\n\r\nzu\r\n\r\n\r\n[1] 20\r\n\r\nSee what the structure of zu looks like:\r\n\r\n\r\nstr(zu)\r\n\r\n\r\n num 20\r\n\r\nYou can also overwrite objects:\r\n\r\n\r\nzu<- \"hello\"\r\n\r\n\r\n\r\nNow see what zu looks like:\r\n\r\n\r\nstr(zu)\r\n\r\n\r\n chr \"hello\"\r\n\r\nWorking directories and Projects in RStudio\r\nIf you want to import an excel file with your data in, rather than typing it in by hand or export an output to a folder, you need to tell R where to look. You can do this by setting the working directory. But before you do this you need to create a new folder and download and save the example data file in this new folder.\r\nFirst of all create a new folder called ‘Rsession’ in your main drive (I call this H:, but it could be C: or any other letter!).\r\nThere are two different ways to set the working directory:\r\n1.Use the main menu to navigate to the right folder\r\nOn the rStudio main menu click on:\r\nSession > Set Working Directory > Choose Directory\r\n\r\nNavigate to the Rsession folder you have just created and click once on the folder so its highlighted in blue, then click on the ‘Select folder’ button.\r\nNote: Beware of double clicking on the folder because it will open the folder which you don’t won’t be able to find your data file.\r\nYou can check you have the right folder set as your working directory by doing:\r\n\r\n\r\ngetwd()\r\n\r\n\r\n\r\nYou should see:“H:/Rsession”\r\nYou can tell R to set the working directory using the command setwd()\r\nOn the top left hand window (in your Rscript) type:\r\n\r\n\r\nsetwd('D:/Teaching_Fieldcourses')\r\n\r\n\r\n\r\nBe aware that you need to type the exact file path otherwise R won’t be able to understand it, if you want to know the file path you can also go to windows explorer, find your folder and click once on the file path bar on the top of the window and it will show the file path. Just be careful if you copy this you need to change the backslashes (‘') to forward slashes (’/’).\r\nProjects\r\nA big problem with setting the working directory is that if George shares his code with me and it says:\r\n\r\n\r\nsetwd(\"C:/Users/georgeGale/Documents/PopulationEcologyKMUTT\")\r\n\r\n\r\n\r\nMy computer will try to look for this folder on my computer. Obviously, this will fail and therefore my code is not reproducible. In RStudio you can use projects to keep all files associated with one project together and to interact with GitHub. You can use the library(here) to make your code reproducible. What here::here() does is to look for the main “root” folder where your project is maintained and then use that as the path. See this.\r\nRead in data\r\nNote: R likes using .csv files rather than normal excel spreadsheets (.xlsx files). So please save the files you want to import into R as .csv files.\r\nAlso make sure they are tidy (e.g. data in two columns with no breaks, you can have titles for columns) and don’t have random plots, writing etc. otherwise R won’t know how to interpret it.\r\nWe will practice loading data into R now. Let’s get a nice opensource data file from GitHub. You need to put in the following command to get the dataset:\r\n\r\n\r\ninstall.packages(\"devtools\")\r\ndevtools::install_github(\"allisonhorst/palmerpenguins\")\r\nlibrary(palmerpenguins)\r\n\r\n\r\n\r\nCopy the following file into Excel:\r\n\r\nspecies\r\nisland\r\nbill_length_mm\r\nbill_depth_mm\r\nflipper_length_mm\r\nbody_mass_g\r\nsex\r\nyear\r\nAdelie\r\nTorgersen\r\n39.1\r\n18.7\r\n181\r\n3750\r\nmale\r\n2007\r\nAdelie\r\nTorgersen\r\n39.5\r\n17.4\r\n186\r\n3800\r\nfemale\r\n2007\r\nAdelie\r\nTorgersen\r\n40.3\r\n18.0\r\n195\r\n3250\r\nfemale\r\n2007\r\nAdelie\r\nTorgersen\r\nNA\r\nNA\r\nNA\r\nNA\r\nNA\r\n2007\r\nAdelie\r\nTorgersen\r\n36.7\r\n19.3\r\n193\r\n3450\r\nfemale\r\n2007\r\nAdelie\r\nTorgersen\r\n39.3\r\n20.6\r\n190\r\n3650\r\nmale\r\n2007\r\nAdelie\r\nTorgersen\r\n38.9\r\n17.8\r\n181\r\n3625\r\nfemale\r\n2007\r\nAdelie\r\nTorgersen\r\n39.2\r\n19.6\r\n195\r\n4675\r\nmale\r\n2007\r\nAdelie\r\nTorgersen\r\n34.1\r\n18.1\r\n193\r\n3475\r\nNA\r\n2007\r\nAdelie\r\nTorgersen\r\n42.0\r\n20.2\r\n190\r\n4250\r\nNA\r\n2007\r\n\r\nNow save the file in the Rsession folder you created. Call it testdata and save it as type CSV (Comma delimited).\r\nTo read in your file you use the function read.csv in R:\r\n\r\n\r\nmydata<-read.csv(\"testdata.csv\") \r\n# here the file will be called mydata in R, and as the working directory will be the folder in which your data file is saved, R will find it there\r\n\r\n\r\n\r\nYou can also save files back into your working directory with the function write.csv, if you have changed them in R:\r\n\r\n\r\nwrite.csv(mydata, \"testdatanew.csv\") \r\n# the first bit in the bracket is the name of the file in R, the second bit is the name of the new csv file you want to save\r\n\r\n\r\n\r\nSome basic outputs from a dataset\r\nApart from the str function, there are some other functions we can use to get an initial idea of our data. We can use the function mean to calculate the mean of some values:\r\n\r\n\r\nmean(c(5,7,9))\r\n\r\n\r\n[1] 7\r\n\r\nWe can summarise each column. For continuous variables, this will show the minimum and maximum value, the quartiles and the mean. For nominal variables, it will show the different categories and a count of each one.\r\n\r\n\r\npenguins<-palmerpenguins::penguins\r\nsummary(penguins)\r\n\r\n\r\n      species          island    bill_length_mm  bill_depth_mm  \r\n Adelie   :152   Biscoe   :168   Min.   :32.10   Min.   :13.10  \r\n Chinstrap: 68   Dream    :124   1st Qu.:39.23   1st Qu.:15.60  \r\n Gentoo   :124   Torgersen: 52   Median :44.45   Median :17.30  \r\n                                 Mean   :43.92   Mean   :17.15  \r\n                                 3rd Qu.:48.50   3rd Qu.:18.70  \r\n                                 Max.   :59.60   Max.   :21.50  \r\n                                 NA's   :2       NA's   :2      \r\n flipper_length_mm  body_mass_g       sex           year     \r\n Min.   :172.0     Min.   :2700   female:165   Min.   :2007  \r\n 1st Qu.:190.0     1st Qu.:3550   male  :168   1st Qu.:2007  \r\n Median :197.0     Median :4050   NA's  : 11   Median :2008  \r\n Mean   :200.9     Mean   :4202                Mean   :2008  \r\n 3rd Qu.:213.0     3rd Qu.:4750                3rd Qu.:2009  \r\n Max.   :231.0     Max.   :6300                Max.   :2009  \r\n NA's   :2         NA's   :2                                 \r\n\r\nWe can also get the summary for just one variable. We need to tell R in which dataset to look for it, and then add the column name after a dollar sign:\r\n\r\n\r\nsummary(penguins$bill_depth_mm)\r\n\r\n\r\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \r\n  13.10   15.60   17.30   17.15   18.70   21.50       2 \r\n\r\nmean(penguins$bill_depth_mm)\r\n\r\n\r\n[1] NA\r\n\r\nTo get a better idea of your dataset, you can also use the head function, which will show the first 6 rows of the dataset, unless otherwise specified in the code:\r\n\r\n\r\nhead(penguins)\r\n\r\n\r\n# A tibble: 6 x 8\r\n  species island    bill_length_mm bill_depth_mm flipper_length_mm\r\n  <fct>   <fct>              <dbl>         <dbl>             <int>\r\n1 Adelie  Torgersen           39.1          18.7               181\r\n2 Adelie  Torgersen           39.5          17.4               186\r\n3 Adelie  Torgersen           40.3          18                 195\r\n4 Adelie  Torgersen           NA            NA                  NA\r\n5 Adelie  Torgersen           36.7          19.3               193\r\n6 Adelie  Torgersen           39.3          20.6               190\r\n# ... with 3 more variables: body_mass_g <int>, sex <fct>, year <int>\r\n\r\nhead(penguins, 10) \r\n\r\n\r\n# A tibble: 10 x 8\r\n   species island    bill_length_mm bill_depth_mm flipper_length_mm\r\n   <fct>   <fct>              <dbl>         <dbl>             <int>\r\n 1 Adelie  Torgersen           39.1          18.7               181\r\n 2 Adelie  Torgersen           39.5          17.4               186\r\n 3 Adelie  Torgersen           40.3          18                 195\r\n 4 Adelie  Torgersen           NA            NA                  NA\r\n 5 Adelie  Torgersen           36.7          19.3               193\r\n 6 Adelie  Torgersen           39.3          20.6               190\r\n 7 Adelie  Torgersen           38.9          17.8               181\r\n 8 Adelie  Torgersen           39.2          19.6               195\r\n 9 Adelie  Torgersen           34.1          18.1               193\r\n10 Adelie  Torgersen           42            20.2               190\r\n# ... with 3 more variables: body_mass_g <int>, sex <fct>, year <int>\r\n\r\n# this will show the first 10 rows\r\n\r\n\r\n\r\nThe same works for the last 6 rows with the tail function:\r\n\r\n\r\ntail(penguins)\r\n\r\n\r\n# A tibble: 6 x 8\r\n  species   island bill_length_mm bill_depth_mm flipper_length_mm\r\n  <fct>     <fct>           <dbl>         <dbl>             <int>\r\n1 Chinstrap Dream            45.7          17                 195\r\n2 Chinstrap Dream            55.8          19.8               207\r\n3 Chinstrap Dream            43.5          18.1               202\r\n4 Chinstrap Dream            49.6          18.2               193\r\n5 Chinstrap Dream            50.8          19                 210\r\n6 Chinstrap Dream            50.2          18.7               198\r\n# ... with 3 more variables: body_mass_g <int>, sex <fct>, year <int>\r\n\r\ntail(penguins, 10)\r\n\r\n\r\n# A tibble: 10 x 8\r\n   species   island bill_length_mm bill_depth_mm flipper_length_mm\r\n   <fct>     <fct>           <dbl>         <dbl>             <int>\r\n 1 Chinstrap Dream            50.2          18.8               202\r\n 2 Chinstrap Dream            45.6          19.4               194\r\n 3 Chinstrap Dream            51.9          19.5               206\r\n 4 Chinstrap Dream            46.8          16.5               189\r\n 5 Chinstrap Dream            45.7          17                 195\r\n 6 Chinstrap Dream            55.8          19.8               207\r\n 7 Chinstrap Dream            43.5          18.1               202\r\n 8 Chinstrap Dream            49.6          18.2               193\r\n 9 Chinstrap Dream            50.8          19                 210\r\n10 Chinstrap Dream            50.2          18.7               198\r\n# ... with 3 more variables: body_mass_g <int>, sex <fct>, year <int>\r\n\r\nChanging the type of variable\r\nIf variables are not in the right format, it can mess up our analysis or our plots, as R might deal differently with different types of variables. Sometimes R does not read the variables in the right way, or we need to change the variable type for some reason. Once we have checked whether our variables are in the correct format, we can change those that are not:\r\n\r\n\r\npenguins$species<-as.character(penguins$species)\r\n\r\n# we can check what type of variable we have in different ways:\r\nstr(penguins$species)\r\n\r\n\r\n chr [1:344] \"Adelie\" \"Adelie\" \"Adelie\" \"Adelie\" \"Adelie\" ...\r\n\r\nis.character(penguins$species)\r\n\r\n\r\n[1] TRUE\r\n\r\nIn this case, species should really be a factor, so we will change it back to that:\r\n\r\n\r\npenguins$species<-as.factor(penguins$species)\r\n\r\n\r\n\r\nIn the same way, we can change variables to integers (as.integer) or continuous variables (as.numeric).\r\nBasic plots\r\nNow we have some idea of what our data are, we can start to make plots to see whether our variables interact in some way. The function is called plot and is very simple. If we have two continuous variables, we will get a scatter plot:\r\n\r\n\r\nplot(x=penguins$bill_length_mm, y=penguins$bill_depth_mm)\r\n\r\n\r\n\r\n\r\nWe can change axis labels by changing xlab and ylab in the brackets:\r\n\r\n\r\nplot(x=penguins$bill_length_mm, y=penguins$bill_depth_mm, xlab=\"Bill length\", ylab=\"Bill depth\")\r\n\r\n\r\n\r\n\r\nWe can change the colour of the circles depending on the species:\r\n\r\n\r\nplot(x=penguins$bill_length_mm, y=penguins$bill_depth_mm, xlab=\"Bill length\", ylab=\"Bill depth\", col=penguins$species)\r\n\r\n\r\n\r\n\r\nIf we have one ordinal variable (species) and one continuous variable (bill_length_mm), we will get a boxplot:\r\n\r\n\r\nplot(x=penguins$species, y=penguins$bill_length_mm)\r\n\r\n\r\n\r\n\r\nWe can also make histograms using the hist function:\r\n\r\n\r\nhist(penguins$bill_length_mm)\r\n\r\n\r\n\r\n\r\nWe can completely customise the plots. The benefit of making plots in R is that we can use the same colours, font etc for all of them by just changing the variable names in our code. This means you can standardise how your plots will look in your final PhD thesis very easily.\r\nTo save the plots, we need to set up the type of file first, run the plot commands, and then save it:\r\n\r\n\r\njpeg('rplot.jpg')\r\n\r\nplot(x=penguins$species, y=penguins$bill_length_mm)\r\n\r\ndev.off()\r\n\r\n\r\npng \r\n  2 \r\n\r\nThe plots will be saved in the folder that you set in the working directory. We can also save plots as pdfs:\r\n\r\n\r\npdf('rplot.pdf')\r\n\r\nplot(x=penguins$species, y=penguins$bill_length_mm)\r\n\r\ndev.off()\r\n\r\n\r\npng \r\n  2 \r\n\r\nHow to install and load packages\r\nR has a huge library of additional packages. At some point you will most likely need to use some of these packages - they might be able to run some analyses which will save you from writing lots of code, contain some datasets that are of interest to you, or help with organising or displaying your data, for example. Some packages are very specific and will only be of interest to a few, whereas others are widely used. For a full list see https://cran.r-project.org/web/packages/available_packages_by_name.html\r\nAs with all programmes on your computer, you need to install a package the first time that you use it, and load it every following time. To install a package, you can either use the code\r\n\r\n\r\ninstall.packages(\"dplyr\") # in this case, we are installing a package called dplyr\r\n\r\n\r\n\r\nOr choose the package through the menu: Tools > Install packages., then you can type the name of the package.\r\n\r\n\r\nOnce you have installed your package, you can load it.\r\n\r\n\r\nlibrary(dplyr)\r\n\r\n\r\n\r\nEvery time you start R, you will have to load the package again if you want to use a function in that package!\r\nTo find out about all the different functions in a package, you can usually find a detailed description of all functions in a package (called vignette) online, just google “R package packagename”. For dplyr, this will get you the following pdf: https://cran.r-project.org/web/packages/dplyr/dplyr.pdf\r\ndplyr is a useful package for manipulating data. We will use a dataset called airquality for some basic functions with dplyr. Some of the easiest to use functions in the package are filter and select.\r\nfilter will retain or remove rows in your dataset, according to conditions you set:\r\n\r\n\r\ntemphigh<-filter(airquality, Temp>79) \r\n# this creates a new dataset called temphigh, which are all values from dataset airquality where temperature is above 79\r\n\r\ntemplow<-filter(airquality, Temp<=79) \r\n# this creates a new dataset called temphigh, which are all values from dataset airquality where temperature is below or at 79\r\n\r\n\r\n\r\nWe can also examine rows that contain NA values, or exclude rows that contain NA values:\r\n\r\n\r\nsummary(airquality) \r\n\r\n\r\n     Ozone           Solar.R           Wind             Temp      \r\n Min.   :  1.00   Min.   :  7.0   Min.   : 1.700   Min.   :56.00  \r\n 1st Qu.: 18.00   1st Qu.:115.8   1st Qu.: 7.400   1st Qu.:72.00  \r\n Median : 31.50   Median :205.0   Median : 9.700   Median :79.00  \r\n Mean   : 42.13   Mean   :185.9   Mean   : 9.958   Mean   :77.88  \r\n 3rd Qu.: 63.25   3rd Qu.:258.8   3rd Qu.:11.500   3rd Qu.:85.00  \r\n Max.   :168.00   Max.   :334.0   Max.   :20.700   Max.   :97.00  \r\n NA's   :37       NA's   :7                                       \r\n     Month            Day      \r\n Min.   :5.000   Min.   : 1.0  \r\n 1st Qu.:6.000   1st Qu.: 8.0  \r\n Median :7.000   Median :16.0  \r\n Mean   :6.993   Mean   :15.8  \r\n 3rd Qu.:8.000   3rd Qu.:23.0  \r\n Max.   :9.000   Max.   :31.0  \r\n                               \r\n\r\n# Ozone contains 37 rows with NA values\r\n\r\nairqualityNA<-filter(airquality, is.na(Ozone)) \r\n# In this case we keep those rows where Ozone is NA\r\n\r\nsummary(airqualityNA)\r\n\r\n\r\n     Ozone        Solar.R           Wind            Temp      \r\n Min.   : NA   Min.   : 31.0   Min.   : 1.70   Min.   :56.00  \r\n 1st Qu.: NA   1st Qu.:131.0   1st Qu.: 8.00   1st Qu.:75.00  \r\n Median : NA   Median :194.0   Median : 9.70   Median :79.00  \r\n Mean   :NaN   Mean   :189.5   Mean   :10.26   Mean   :77.92  \r\n 3rd Qu.: NA   3rd Qu.:261.5   3rd Qu.:12.60   3rd Qu.:84.00  \r\n Max.   : NA   Max.   :332.0   Max.   :16.60   Max.   :93.00  \r\n NA's   :37    NA's   :2                                      \r\n     Month            Day       \r\n Min.   :5.000   Min.   : 1.00  \r\n 1st Qu.:6.000   1st Qu.:10.00  \r\n Median :6.000   Median :15.00  \r\n Mean   :6.351   Mean   :16.65  \r\n 3rd Qu.:7.000   3rd Qu.:25.00  \r\n Max.   :9.000   Max.   :30.00  \r\n                                \r\n\r\nairqualitynoNA<-filter(airquality, !is.na(Ozone)) \r\n# Often we might want to remove NAs from our dataset, not keep them - we do this by adding ! in front of is.na. Here we keep rows if Ozone is not NA\r\n\r\nsummary(airqualitynoNA)\r\n\r\n\r\n     Ozone           Solar.R           Wind             Temp      \r\n Min.   :  1.00   Min.   :  7.0   Min.   : 2.300   Min.   :57.00  \r\n 1st Qu.: 18.00   1st Qu.:113.5   1st Qu.: 7.400   1st Qu.:71.00  \r\n Median : 31.50   Median :207.0   Median : 9.700   Median :79.00  \r\n Mean   : 42.13   Mean   :184.8   Mean   : 9.862   Mean   :77.87  \r\n 3rd Qu.: 63.25   3rd Qu.:255.5   3rd Qu.:11.500   3rd Qu.:85.00  \r\n Max.   :168.00   Max.   :334.0   Max.   :20.700   Max.   :97.00  \r\n                  NA's   :5                                       \r\n     Month            Day       \r\n Min.   :5.000   Min.   : 1.00  \r\n 1st Qu.:6.000   1st Qu.: 8.00  \r\n Median :7.000   Median :16.00  \r\n Mean   :7.198   Mean   :15.53  \r\n 3rd Qu.:8.250   3rd Qu.:22.00  \r\n Max.   :9.000   Max.   :31.00  \r\n                                \r\n\r\nThe select function can be used to include or exclude columns from the dataset:\r\n\r\n\r\nairquality2<-select(airquality, -Ozone) \r\n# this will make a new dataset called airquality2, based on airquality, without the variable Ozone\r\n\r\nstr(airquality2)\r\n\r\n\r\n'data.frame':   153 obs. of  5 variables:\r\n $ Solar.R: int  190 118 149 313 NA NA 299 99 19 194 ...\r\n $ Wind   : num  7.4 8 12.6 11.5 14.3 14.9 8.6 13.8 20.1 8.6 ...\r\n $ Temp   : int  67 72 74 62 56 66 65 59 61 69 ...\r\n $ Month  : int  5 5 5 5 5 5 5 5 5 5 ...\r\n $ Day    : int  1 2 3 4 5 6 7 8 9 10 ...\r\n\r\nairquality3<-select(airquality, Ozone, Solar.R) \r\n# this will make a new dataset called airquality3, based on airquality, with only the variables Ozone and Solar.R\r\n\r\nstr(airquality3)\r\n\r\n\r\n'data.frame':   153 obs. of  2 variables:\r\n $ Ozone  : int  41 36 12 18 NA 28 23 19 8 NA ...\r\n $ Solar.R: int  190 118 149 313 NA NA 299 99 19 194 ...\r\n\r\nSaving R files\r\nIt is important to save your code - if you find a mistake in your dataset, or your supervisor wants you to run some analysis again, it will be much quicker to do if you have your code saved.\r\nIt is up to you how you organise your code - for example, you could have a script for each chapter of your PhD. It is always a good idea to annotate what you do, so if you come back to your code at a later date you know what you were doing:\r\n\r\n\r\n# if you add a hash, R won't read what you write after it until the next line. This way you can annotate your code\r\n\r\n\r\n\r\nTo save your R script, go to File > Save as. and then find the folder that you want to save your script in. You can also save your code in text files, but be careful with using Word: it formats some symbols in a way that R then cannot read!\r\nSolving problems in R/ help\r\nSometimes it is difficult to know how exactly you need to write your code for a certain function, and you might get error messages. These can be difficult to interpret, especially if you are new to R. You can get more information on how to set up your code within a function by finding an R help file:\r\n\r\n\r\n?summary\r\n# this will tell you more about the summary function\r\n\r\n\r\n\r\nThe help files are very useful, and the more you use R, the better you will understand them. Often it is easiest to look at the example code at the end.\r\nUseful resources\r\nOnline\r\nThere is lots of information online about all kinds of R related problems, tutorials and so on. Here are a few that are particularly useful if you are new to R:\r\nThe book R for data science covers starting points on how to arrange your data, data visualisation, programming and model building in R.\r\nR bloggers - each post covers a topic with some example code. This can be handy if you have a specific R-related problem, want to know some basic information about a new package you are using, etc.\r\nwww.swirlstats.com Learn R, in R - this is an interactive tool with different modules that teach R within an R package.\r\nstackoverflow - On this forum people can post R-related questions, and more experienced users help to find solutions. The examples provided in the questions need to be reproducible however. Often the questions you may have will already have been asked and answered on stackoverflow, so it is worth checking whether you can find a solution already.\r\nChecklist\r\nOther than those helpful resources here is a checklist of what to do if you are stuck with a problem in R:\r\nFirst of all don’t panic or get frustrated! Everyone will have a problem at some point in time if they are learning something new\r\nHave a sanity check and look for obvious wrong things e.g. spelling mistakes, an object isn’t in your data environment, you haven’t called library() before using a package.\r\nGoogle it! There is somewhat an art to wording your question in google to get the type of answers you are looking for but this will get better with practise. (And googling error messages never gets you very far). Chances are someone else will have definitely faced the same problem as you, even if it’s not exactly in the same format and the answer is somewhere on the internet.\r\nCan you find an example of what you want where it works? Even if it’s a simpler example understanding the basics of it might help you work out what’s wrong. Have a close look at that example, what exactly the data they used was, what format it was etc.\r\nAsk a friend ! They might have faced the same problem as you (although maybe don’t do this every 10 minutes as they might start to get annoyed and also working out a problem helps your understanding too).\r\nSometimes it’s just better to walk away (for now). If you have been struggling for a couple of hours it’s sometimes really good to just walk away from it and start again another day when you have a fresh pair of eyes (and hopefully some renewed patience). Or even just going for a small walk can help you get some clarity on the problem.\r\nIf you really can’t suss it ask a question on stack overflow (which can be quite intimidating as you need to follow certain rules e.g. have a small chunk of data which is reproducible) or supervisor/lecturer/someone very knowledgeable !\r\nPeople trying to help you, particularly when it’s someone that can’t sit with you and actually see your computer (i.e. someone on the internet) often find it useful to have a reproducible example, creating one of these in itself can be quite challenging but have a look at the ‘reprex’ package, it helps you you create a reproducible example snippet of your code which might help you to better understand your error/ problem and will help those people trying to help you\r\nHomework\r\nWatch this on R programming\r\nWatch this on using GitHub and RStudio\r\n\r\n\r\n\r\n",
    "preview": "posts/RStudio_for_beginners/RStudio_for_beginners_files/figure-html5/unnamed-chunk-34-1.png",
    "last_modified": "2022-06-13T08:51:11+02:00",
    "input_file": {}
  },
  {
    "path": "posts/welcome/",
    "title": "Welcome",
    "description": {},
    "author": [
      {
        "name": "Matt",
        "url": {}
      }
    ],
    "date": "2022-06-13",
    "categories": [],
    "contents": "\r\nWelcome to the Population Ecology Course at KMUTT\r\nYou will be required to attend lectures online and this website serves as a site for information and resources. As Matt is in Norway and unable to travel to Thailand he will record some of his sessions which will make things easier with unstable or unpredictable internet access. However, we plan for the worst and hope for the best and expect you to attend the live sessions.\r\nThroughout the course we expect you to be curious, to ask questions and to read outside of the lectures. What this last one means is that you will be introduced to topics in the lectures and practicals, but we expect that you will, after the formal teaching times, read academic papers, blogs, textbooks, watch youtube videos, and so on so that you get a better understanding.\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2022-06-13T08:40:44+02:00",
    "input_file": {}
  },
  {
    "path": "posts/Competition/",
    "title": "Links to videos from George",
    "description": {},
    "author": [
      {
        "name": "Matt",
        "url": {}
      }
    ],
    "date": "2022-06-12",
    "categories": [],
    "contents": "\r\n\r\nModelling Interspecific Competition\r\n\r\n\r\n\r\n\r\nPredator prey\r\n\r\n\r\n\r\n\r\nPopulation dynamics\r\n\r\n\r\n\r\n\r\nLeslie Matrices\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2022-06-12T16:43:06+02:00",
    "input_file": {}
  },
  {
    "path": "posts/if_you_go_down_to_the_woods/",
    "title": "If you go down to the woods today....",
    "description": {},
    "author": [
      {
        "name": "Matt Grainger",
        "url": {}
      }
    ],
    "date": "2022-06-12",
    "categories": [],
    "contents": "\r\nBear population challenge\r\nApply your knowledge about population models to this grizzly bear dataset. Answer the questions and show your code (either in a new script file or in a new Rmarkdown file - you can adapt the original). Save the file and send it to me.\r\n\r\n\r\n# a # sign means that R does not read this as code. \r\n#install.packages(\"popbio\") #remove the first hash if you do not have popbio installed as a package \r\nlibrary(popbio)\r\n\r\n\r\n\r\nUpload and explore the bears dataset\r\n\r\n\r\ndata(grizzly)\r\n#View(grizzly)\r\n#?grizzly# what is the grizzly data about?\r\nattach(grizzly) ## You need to attach the data so that \r\n#you can use it in the functions that follow \r\n#(otherwise you need to signal to R which data you are using)\r\nplot(year, N, type='o', pch=16, las=1, xlab=\"Year\", \r\n     ylab=\"Adult females\", main=\"Yellowstone grizzly bears\") \r\n\r\n\r\n\r\n\r\nWhat is the grizzly data set all about\r\nLook up the grizzly dataset from the R help (see above ?grizzly will search for the dataset in the helpfiles).\r\nProvide a summary of the grizzly dataset\r\nCalculate the rate of population change\r\nTheir are only female bears in this count. What could you do to make this data more representative of the population?\r\nDo we need more data than just female bears?\r\nUse the population models to assess the population change in bears\r\nMake use of only the first 10 years of the bears dataset to predict the future 17 years. Plot this on the same graph (hint in base R you can add points to a plot using the “points()” fuction)\r\n#Extra credit:: Make the plots look pretty (look at ?ggplot2 for example and search on Google for ggplot2)\r\n\r\n\r\ndetach(grizzly)# remember to detach the data from the session\r\nrm(list=ls())# this cleans your environment - is useful but \r\n#you might want to keep it sometimes - use caution\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "preview": "posts/if_you_go_down_to_the_woods/If_you_go_down_to_the_woods_files/figure-html5/bears-1.png",
    "last_modified": "2022-06-12T16:42:35+02:00",
    "input_file": {}
  },
  {
    "path": "posts/Population_models/",
    "title": "Population models",
    "description": {},
    "author": [
      {
        "name": "Matt Grainger",
        "url": {}
      }
    ],
    "date": "2022-06-12",
    "categories": [],
    "contents": "\r\n\r\n\r\n#exponential growth model\r\n#initial population size\r\nN0<-100\r\n#population growth rate\r\nr<-0.1\r\n#years we are simulating\r\nT<-10\r\n#method 1: use the explicit formula directly \r\n#first generate a list of time indices\r\nt<-0:T \r\n#now calculate N at each time\r\nN<-N0*exp(r*t)\r\n#make it pretty\r\ndata.frame(t=t,N=N)\r\n\r\n\r\n    t        N\r\n1   0 100.0000\r\n2   1 110.5171\r\n3   2 122.1403\r\n4   3 134.9859\r\n5   4 149.1825\r\n6   5 164.8721\r\n7   6 182.2119\r\n8   7 201.3753\r\n9   8 222.5541\r\n10  9 245.9603\r\n11 10 271.8282\r\n\r\nplot(t,N,type=\"l\")\r\n\r\n\r\n\r\n\r\n\r\n\r\nN0<-100\r\nr.mean<-0.10\r\nr.sd<-0.30\r\nr<-rnorm(T,r.mean,r.sd)\r\nplot(density(r))\r\nabline(v=r.mean,col=\"blue\")\r\nabline(v=r.mean+r.sd,col=\"blue\",lty=2)\r\nabline(v=r.mean-r.sd,col=\"blue\",lty=2)\r\n\r\n\r\n\r\n#now use this in place of the constant r\r\nt<-N<-array(dim=T+1)\r\n\r\n#first element is initial value\r\nN[1]<-N0\r\nt[1]<-0\r\nfor (i in 1:T)\r\n{\r\n  N[i+1]<-N[i]*exp(r[i])\r\n  t[i+1]=t[i]+1\r\n}\r\n#make it pretty\r\ndata.frame(t=t,N=N)\r\n\r\n\r\n    t        N\r\n1   0 100.0000\r\n2   1  73.4713\r\n3   2 125.7968\r\n4   3 177.1049\r\n5   4 301.5335\r\n6   5 322.1165\r\n7   6 347.1691\r\n8   7 166.8974\r\n9   8 160.4016\r\n10  9 176.2899\r\n11 10 234.2313\r\n\r\nplot(t,N,type=\"l\")\r\n\r\n\r\n\r\n\r\n\r\n\r\n# N to be integer if we want. \r\nN0<-10\r\nr.mean<-0.0\r\nr.sd<-0.8\r\nr<-rnorm(T,r.mean,r.sd)\r\nplot(density(r))\r\nabline(v=r.mean,col=\"blue\")\r\nabline(v=r.mean+r.sd,col=\"blue\",lty=2)\r\nabline(v=r.mean-r.sd,col=\"blue\",lty=2)\r\n\r\n\r\n\r\n\r\n\r\n\r\n#now use this in place of the constant r\r\nt<-N<-array(dim=T+1)\r\n\r\n#first element is initial value\r\nN[1]<-N0\r\nt[1]<-0\r\nfor (i in 1:T)\r\n{\r\n  N[i+1]<-round(N[i]*exp(r[i]),0)\r\n  print(N[i+1])\r\n  N[i+1]<-(N[i+1]>1)*N[i+1] #makes N= 0 if falls below 2\r\n  \r\n  t[i+1]=t[i]+1\r\n}\r\n\r\n\r\n[1] 8\r\n[1] 16\r\n[1] 20\r\n[1] 15\r\n[1] 31\r\n[1] 32\r\n[1] 9\r\n[1] 4\r\n[1] 4\r\n[1] 2\r\n\r\n#make it pretty\r\ndata.frame(t=t,N=N)\r\n\r\n\r\n    t  N\r\n1   0 10\r\n2   1  8\r\n3   2 16\r\n4   3 20\r\n5   4 15\r\n6   5 31\r\n7   6 32\r\n8   7  9\r\n9   8  4\r\n10  9  4\r\n11 10  2\r\n\r\nplot(t,N,type=\"l\")\r\n\r\n\r\n\r\n\r\n\r\n\r\n#continuous growth model\r\n#parameters\r\nT<-50\r\nN0<-100\r\nK<-500\r\nrmax<-0.2\r\nC<-K/N0-1 \r\n#first generate a list of time indices\r\nt<-0:T \r\nN<-K/(1+C*exp(-rmax*t))\r\n#make it pretty\r\ndata.frame(t=t,N=N)\r\n\r\n\r\n    t        N\r\n1   0 100.0000\r\n2   1 116.9612\r\n3   2 135.8223\r\n4   3 156.4824\r\n5   4 178.7428\r\n6   5 202.3048\r\n7   6 226.7803\r\n8   7 251.7132\r\n9   8 276.6120\r\n10  9 300.9880\r\n11 10 324.3928\r\n12 11 346.4493\r\n13 12 366.8724\r\n14 13 385.4770\r\n15 14 402.1749\r\n16 15 416.9626\r\n17 16 429.9046\r\n18 17 441.1143\r\n19 18 450.7368\r\n20 19 458.9332\r\n21 20 465.8692\r\n22 21 471.7060\r\n23 22 476.5947\r\n24 23 480.6734\r\n25 24 484.0651\r\n26 25 486.8778\r\n27 26 489.2051\r\n28 27 491.1271\r\n29 28 492.7121\r\n30 29 494.0173\r\n31 30 495.0912\r\n32 31 495.9738\r\n33 32 496.6988\r\n34 33 497.2940\r\n35 34 497.7823\r\n36 35 498.1829\r\n37 36 498.5113\r\n38 37 498.7805\r\n39 38 499.0011\r\n40 39 499.1819\r\n41 40 499.3300\r\n42 41 499.4513\r\n43 42 499.5507\r\n44 43 499.6321\r\n45 44 499.6987\r\n46 45 499.7533\r\n47 46 499.7980\r\n48 47 499.8346\r\n49 48 499.8646\r\n50 49 499.8891\r\n51 50 499.9092\r\n\r\nplot(t,N,type=\"l\")\r\n\r\n\r\n\r\n\r\n\r\n\r\n#### \r\nT<-50\r\nN0<-100\r\nK<-500\r\nrmax<-0.2\r\n\r\nt<-N<-array(dim=T+1)\r\n\r\n#first element is initial value\r\nN[1]<-N0\r\nt[1]<-0\r\nfor (i in 1:T)\r\n{\r\n  N[i+1]<-N[i]+rmax*N[i]*(1-N[i]/K)\r\n  t[i+1]=t[i]+1\r\n}\r\n#make it pretty\r\ndata.frame(t=t,N=N)\r\n\r\n\r\n    t        N\r\n1   0 100.0000\r\n2   1 116.0000\r\n3   2 133.8176\r\n4   3 153.4183\r\n5   4 174.6870\r\n6   5 197.4182\r\n7   6 221.3123\r\n8   7 245.9831\r\n9   8 270.9766\r\n10  9 295.8006\r\n11 10 319.9616\r\n12 11 343.0037\r\n13 12 364.5438\r\n14 13 384.2957\r\n15 14 402.0816\r\n16 15 417.8301\r\n17 16 431.5633\r\n18 17 443.3772\r\n19 18 453.4193\r\n20 19 461.8675\r\n21 20 468.9124\r\n22 21 474.7433\r\n23 22 479.5395\r\n24 23 483.4642\r\n25 24 486.6620\r\n26 25 489.2584\r\n27 26 491.3606\r\n28 27 493.0586\r\n29 28 494.4276\r\n30 29 495.5297\r\n31 30 496.4157\r\n32 31 497.1275\r\n33 32 497.6987\r\n34 33 498.1568\r\n35 34 498.5241\r\n36 35 498.8184\r\n37 36 499.0542\r\n38 37 499.2430\r\n39 38 499.3941\r\n40 39 499.5152\r\n41 40 499.6120\r\n42 41 499.6896\r\n43 42 499.7516\r\n44 43 499.8013\r\n45 44 499.8410\r\n46 45 499.8728\r\n47 46 499.8982\r\n48 47 499.9186\r\n49 48 499.9349\r\n50 49 499.9479\r\n51 50 499.9583\r\n\r\nplot(t,N,type=\"l\")\r\n\r\n\r\n\r\n\r\n\r\n\r\nT<-50\r\nN0<-100\r\nK<-500\r\nrmax.mean<-0.2\r\nrmax.sd<-0.2\r\nrmax<-rnorm(T,rmax.mean,rmax.sd)\r\nt<-N<-array(dim=T+1)\r\nplot(density(rmax))\r\nabline(v=rmax.mean,col=\"blue\")\r\nabline(v=rmax.mean+rmax.sd,col=\"blue\",lty=2)\r\nabline(v=rmax.mean-rmax.sd,col=\"blue\",lty=2)\r\n\r\n\r\n\r\n#first element is initial value\r\nN[1]<-N0\r\nt[1]<-0\r\nfor (i in 1:T)\r\n{\r\n  N[i+1]<-N[i]+rmax[i]*N[i]*(1-N[i]/K)\r\n  t[i+1]=t[i]+1\r\n}\r\n#make it pretty\r\ndata.frame(t=t,N=N)\r\n\r\n\r\n    t        N\r\n1   0 100.0000\r\n2   1 117.9262\r\n3   2 159.7175\r\n4   3 217.3333\r\n5   4 262.0640\r\n6   5 315.7164\r\n7   6 340.4135\r\n8   7 369.8679\r\n9   8 394.5634\r\n10  9 405.0532\r\n11 10 431.7182\r\n12 11 451.1262\r\n13 12 454.4247\r\n14 13 472.5426\r\n15 14 468.2457\r\n16 15 483.4657\r\n17 16 482.6622\r\n18 17 482.5467\r\n19 18 489.3906\r\n20 19 495.3132\r\n21 20 497.2555\r\n22 21 496.7765\r\n23 22 497.2784\r\n24 23 497.5384\r\n25 24 497.7917\r\n26 25 498.2529\r\n27 26 498.3391\r\n28 27 499.3985\r\n29 28 499.4442\r\n30 29 499.3643\r\n31 30 499.6037\r\n32 31 499.6926\r\n33 32 499.6897\r\n34 33 499.7543\r\n35 34 499.8959\r\n36 35 499.9207\r\n37 36 499.9246\r\n38 37 499.9371\r\n39 38 499.9615\r\n40 39 499.9688\r\n41 40 499.9760\r\n42 41 499.9797\r\n43 42 499.9859\r\n44 43 499.9871\r\n45 44 499.9879\r\n46 45 499.9910\r\n47 46 499.9933\r\n48 47 499.9950\r\n49 48 499.9959\r\n50 49 499.9978\r\n51 50 499.9975\r\n\r\nplot(t,N,type=\"l\")\r\n\r\n\r\n\r\n\r\n\r\n\r\n#instead of the above approaches we can model growth in terms of F and S directly\r\n#as Poisson and Binomial processes\r\n\r\n#AGE STRUCTURE\r\n#Survival rates for four age classes\r\nS=c(0.5,0.65,0.85,0)\r\n#births for four age classes\r\nb=c(0,1,2,0)\r\nf=c(b[1]*S[1],b[2]*S[2],b[3]*S[3],b[4]*S[4])\r\nA1=c(S[1],0,0,0)\r\nA2=c(0,S[2],0,0)\r\nA3=c(0,0,S[3],S[4])\r\nA=rbind(f,A1,A2,A3)\r\nA\r\n\r\n\r\n   [,1] [,2] [,3] [,4]\r\nf   0.0 0.65 1.70    0\r\nA1  0.5 0.00 0.00    0\r\nA2  0.0 0.65 0.00    0\r\nA3  0.0 0.00 0.85    0\r\n\r\nyears=50\r\n#initial abundance vector\r\nN=c(10,100,200,500)\r\nN\r\n\r\n\r\n[1]  10 100 200 500\r\n\r\n#create empty vectors for age vector, time, population, individual ages, and growth rate\r\nage=c()\r\nt=c()\r\npop=c()\r\nage0=c()\r\nage1=c()\r\nage2=c()\r\nage3=c()\r\ngrow=c()\r\n#for loop to simulate population under deterministic conditions\r\nfor (y in 1:max(years)){\r\n  t=append(t,y)\r\n  abund=sum(N)\r\n  pop=append(pop,abund)\r\n  for (i in 1:4){age[i]=N[i]/abund}\r\n  age0=append(age0,age[1])\r\n  age1=append(age1,age[2])\r\n  age2=append(age2,age[3])\r\n  age3=append(age3,age[4])\r\n  \r\n  cat(\"year\",y,\"\\n\");\r\n  cat(\"Population\",N,\"\\n\");\r\n  cat(\"age structure\",age,\"\\n\");\r\n  N=A%*%N\r\n  \r\n  grow=append(grow,sum(N)/abund)\r\n  cat(\"lambda\",grow[y],\"\\n\");\r\n}\r\n\r\n\r\nyear 1 \r\nPopulation 10 100 200 500 \r\nage structure 0.01234568 0.1234568 0.2469136 0.617284 \r\nlambda 0.7962963 \r\nyear 2 \r\nPopulation 405 5 65 170 \r\nage structure 0.627907 0.007751938 0.1007752 0.2635659 \r\nlambda 0.5810078 \r\nyear 3 \r\nPopulation 113.75 202.5 3.25 55.25 \r\nage structure 0.3035357 0.5403602 0.008672448 0.1474316 \r\nlambda 0.8763509 \r\nyear 4 \r\nPopulation 137.15 56.875 131.625 2.7625 \r\nage structure 0.417615 0.1731816 0.4007917 0.008411677 \r\nlambda 1.455962 \r\nyear 5 \r\nPopulation 260.7312 68.575 36.96875 111.8812 \r\nage structure 0.5452846 0.1434155 0.07731521 0.2339847 \r\nlambda 0.6562362 \r\nyear 6 \r\nPopulation 107.4206 130.3656 44.57375 31.42344 \r\nage structure 0.34234 0.4154637 0.1420526 0.1001437 \r\nlambda 1.073507 \r\nyear 7 \r\nPopulation 160.513 53.71031 84.73766 37.88769 \r\nage structure 0.4765137 0.1594494 0.25156 0.1124769 \r\nlambda 1.087019 \r\nyear 8 \r\nPopulation 178.9657 80.25652 34.9117 72.02701 \r\nage structure 0.4887624 0.2191837 0.09534524 0.1967086 \r\nlambda 0.7724504 \r\nyear 9 \r\nPopulation 111.5166 89.48286 52.16674 29.67495 \r\nage structure 0.394273 0.3163714 0.1844383 0.1049174 \r\nlambda 1.078737 \r\nyear 10 \r\nPopulation 146.8473 55.75832 58.16386 44.34172 \r\nage structure 0.4812911 0.1827475 0.1906317 0.1453297 \r\nlambda 0.9643281 \r\nyear 11 \r\nPopulation 135.1215 73.42365 36.2429 49.43928 \r\nage structure 0.4592418 0.2495474 0.12318 0.1680309 \r\nlambda 0.8681414 \r\nyear 12 \r\nPopulation 109.3383 67.56073 47.72538 30.80647 \r\nage structure 0.4280544 0.2644971 0.1868426 0.1206059 \r\nlambda 1.034322 \r\nyear 13 \r\nPopulation 125.0476 54.66916 43.91448 40.56657 \r\nage structure 0.4733106 0.2069251 0.1662182 0.1535462 \r\nlambda 0.9295142 \r\nyear 14 \r\nPopulation 110.1896 62.52381 35.53495 37.3273 \r\nage structure 0.4486991 0.254601 0.1447006 0.1519992 \r\nlambda 0.9243175 \r\nyear 15 \r\nPopulation 101.0499 55.09478 40.64047 30.20471 \r\nage structure 0.4451736 0.2427191 0.1790409 0.1330663 \r\nlambda 0.994676 \r\nyear 16 \r\nPopulation 104.9004 50.52495 35.81161 34.5444 \r\nage structure 0.4646106 0.2237782 0.1586119 0.1529994 \r\nlambda 0.9276772 \r\nyear 17 \r\nPopulation 93.72095 52.45021 32.84122 30.43987 \r\nage structure 0.4474574 0.2504161 0.1567957 0.1453308 \r\nlambda 0.9490987 \r\nyear 18 \r\nPopulation 89.9227 46.86047 34.09263 27.91503 \r\nage structure 0.4523483 0.2357275 0.1715 0.1404241 \r\nlambda 0.969945 \r\nyear 19 \r\nPopulation 88.41679 44.96135 30.45931 28.97874 \r\nage structure 0.4585548 0.2331824 0.1579707 0.150292 \r\nlambda 0.9352399 \r\nyear 20 \r\nPopulation 81.0057 44.20839 29.22488 25.89041 \r\nage structure 0.4492097 0.2451536 0.1620639 0.1435729 \r\nlambda 0.9565673 \r\nyear 21 \r\nPopulation 78.41775 40.50285 28.73546 24.84115 \r\nage structure 0.454603 0.2348029 0.1665851 0.144009 \r\nlambda 0.9573372 \r\nyear 22 \r\nPopulation 75.17713 39.20887 26.32685 24.42514 \r\nage structure 0.4552382 0.237431 0.1594234 0.1479074 \r\nlambda 0.9428089 \r\nyear 23 \r\nPopulation 70.24142 37.58856 25.48577 22.37782 \r\nage structure 0.4511517 0.2414266 0.1636918 0.1437299 \r\nlambda 0.9568446 \r\nyear 24 \r\nPopulation 67.75837 35.12071 24.43257 21.6629 \r\nage structure 0.4548319 0.2357497 0.164005 0.1454134 \r\nlambda 0.9521032 \r\nyear 25 \r\nPopulation 64.36382 33.87919 22.82846 20.76768 \r\nage structure 0.4537804 0.2388564 0.1609461 0.1464171 \r\nlambda 0.9478161 \r\nyear 26 \r\nPopulation 60.82985 32.18191 22.02147 19.40419 \r\nage structure 0.4524771 0.2393821 0.1638046 0.1443362 \r\nlambda 0.955137 \r\nyear 27 \r\nPopulation 58.35474 30.41493 20.91824 18.71825 \r\nage structure 0.4544544 0.236865 0.1629068 0.1457738 \r\nlambda 0.9505642 \r\nyear 28 \r\nPopulation 55.33072 29.17737 19.7697 17.78051 \r\nage structure 0.4533138 0.2390446 0.1619693 0.1456722 \r\nlambda 0.9504367 \r\nyear 29 \r\nPopulation 52.57379 27.66536 18.96529 16.80425 \r\nage structure 0.4531884 0.2384766 0.1634817 0.1448534 \r\nlambda 0.953492 \r\nyear 30 \r\nPopulation 50.22348 26.28689 17.98248 16.1205 \r\nage structure 0.4540454 0.2376467 0.1625706 0.1457374 \r\nlambda 0.9505184 \r\nyear 31 \r\nPopulation 47.6567 25.11174 17.08648 15.28511 \r\nage structure 0.4532689 0.2388409 0.1625117 0.1453786 \r\nlambda 0.9515323 \r\nyear 32 \r\nPopulation 45.36965 23.82835 16.32263 14.52351 \r\nage structure 0.4534963 0.2381784 0.1631543 0.145171 \r\nlambda 0.9524235 \r\nyear 33 \r\nPopulation 43.2369 22.68482 15.48843 13.87424 \r\nage structure 0.4537669 0.2380749 0.1625495 0.1456087 \r\nlambda 0.950882 \r\nyear 34 \r\nPopulation 41.07546 21.61845 14.74514 13.16516 \r\nage structure 0.4533505 0.2386031 0.1627423 0.1453041 \r\nlambda 0.9518521 \r\nyear 35 \r\nPopulation 39.11872 20.53773 14.05199 12.53337 \r\nage structure 0.4535935 0.2381412 0.1629371 0.1453282 \r\nlambda 0.95187 \r\nyear 36 \r\nPopulation 37.23791 19.55936 13.34953 11.94419 \r\nage structure 0.4536175 0.2382644 0.1626186 0.1454994 \r\nlambda 0.95123 \r\nyear 37 \r\nPopulation 35.40778 18.61896 12.71358 11.3471 \r\nage structure 0.4534377 0.2384373 0.1628122 0.1453127 \r\nlambda 0.9518585 \r\nyear 38 \r\nPopulation 33.71542 17.70389 12.10232 10.80655 \r\nage structure 0.4536021 0.2381854 0.1628228 0.1453896 \r\nlambda 0.9516403 \r\nyear 39 \r\nPopulation 32.08147 16.85771 11.50753 10.28697 \r\nage structure 0.453553 0.2383265 0.1626881 0.1454325 \r\nlambda 0.9514555 \r\nyear 40 \r\nPopulation 30.52031 16.04074 10.95751 9.781399 \r\nage structure 0.4534967 0.2383469 0.162816 0.1453403 \r\nlambda 0.9517802 \r\nyear 41 \r\nPopulation 29.05425 15.26015 10.42648 9.313884 \r\nage structure 0.4535845 0.2382361 0.1627745 0.145405 \r\nlambda 0.951574 \r\nyear 42 \r\nPopulation 27.64411 14.52712 9.9191 8.862507 \r\nage structure 0.4535328 0.2383338 0.162734 0.1453994 \r\nlambda 0.951572 \r\nyear 43 \r\nPopulation 26.3051 13.82206 9.44263 8.431235 \r\nage structure 0.4535282 0.2383071 0.1628011 0.1453636 \r\nlambda 0.9517062 \r\nyear 44 \r\nPopulation 25.03681 13.15255 8.984337 8.026236 \r\nage structure 0.4535659 0.2382711 0.1627599 0.145403 \r\nlambda 0.9515733 \r\nyear 45 \r\nPopulation 23.82253 12.5184 8.549157 7.636687 \r\nage structure 0.4535312 0.2383242 0.1627581 0.1453865 \r\nlambda 0.9516202 \r\nyear 46 \r\nPopulation 22.67053 11.91127 8.136963 7.266784 \r\nage structure 0.4535418 0.2382942 0.1627863 0.1453777 \r\nlambda 0.9516585 \r\nyear 47 \r\nPopulation 21.57516 11.33527 7.742322 6.916418 \r\nage structure 0.4535535 0.2382902 0.1627593 0.1453971 \r\nlambda 0.9515901 \r\nyear 48 \r\nPopulation 20.52987 10.78758 7.367922 6.580974 \r\nage structure 0.453535 0.2383135 0.1627682 0.1453834 \r\nlambda 0.9516339 \r\nyear 49 \r\nPopulation 19.53739 10.26494 7.011927 6.262734 \r\nage structure 0.453546 0.2382928 0.1627766 0.1453847 \r\nlambda 0.9516339 \r\nyear 50 \r\nPopulation 18.59248 9.768697 6.672208 5.960138 \r\nage structure 0.4535468 0.2382985 0.1627625 0.1453922 \r\nlambda 0.9516058 \r\n\r\nplot(t,pop,xlab=\"t\",ylab=\"N\",main=\"Popsize\",type=\"l\")\r\n\r\n\r\n\r\n#savePlot(filename=\"Popsize\",type=\"png\")\r\n#win.graph()\r\n\r\n\r\n\r\n\r\n\r\nplot(t,age0,xlab=\"t\",ylab=\"age\",main=\"age_structure\",type=\"l\")\r\nlines(t,age1,col=\"green\")\r\nlines(t,age2,col=\"red\")\r\nlines(t,age3,col=\"blue\")\r\nlegend(\"top\",\"age0=black, age1=green, age2=red, age3=blue\")\r\n\r\n\r\n\r\n#savePlot(filename=\"age_structure\",type=\"png\")\r\n#win.graph()\r\n\r\n\r\n\r\n\r\n\r\nplot(t,grow,xlab=\"t\",ylab=\"lambda\",main=\"popgrowth_age\",type=\"l\")\r\n\r\n\r\n\r\n#savePlot(filename=\"popgrowth_age\",type=\"png\")\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2022-06-12T16:43:26+02:00",
    "input_file": {}
  },
  {
    "path": "posts/Basic_R/",
    "title": "Basic R Introduction",
    "description": {},
    "author": [
      {
        "name": "Dusit",
        "url": {}
      }
    ],
    "date": "2022-06-13",
    "categories": [],
    "contents": "\r\n\r\n\r\n# Working directory\r\ngetwd()\r\n#setwd(\"D:/PopEco/Day1\") # note / instead of \\ in windows\r\n\r\n\r\n\r\n\r\n\r\n# Use R like a calculator\r\n3+9+12-7 # comment\r\n(3+9+12)-7\r\n\r\n12+17/2 -3/4*2.5\r\n(12+17/2) -(3/4*2.5)\r\n\r\n(12+17/2 -3/4)*2.5\r\n(12+(17/2 -3/4))*2.5\r\n\r\n# takes multiplication and division parts first, then addition and subtraction\r\n\r\npi # the constant pie\r\nsqrt(9) # square root\r\n3^2 # power 2\r\n\r\n### Open new script ###\r\n# go to File > Save as\r\n\r\n# Storing the results\r\n# The object (ans1) holds the value \r\nans1 <- 5+2 \r\nans1 # one, not lower case L\r\n(ans2 <- ans1 + 3)\r\nans2\r\n\r\nls( ) #list of object(s)\r\nrm(\"ans2\") # remove object\r\nrm(\"ans1\", \"ans2\") # remove object\r\nls()\r\n\r\n# Save workspace\r\n# the work space is your current R working environment, includes any user-defined objects\r\n#save.image(\"basic_R_scriptSOy.RData\")\r\n#q()\r\n#load(\"D:\\\\PopEco\\\\Day1\\\\basic_R_script.RData\")\r\n\r\n#### Data type (or mode) \r\n# Vectors = one-dimensional array, where element has the same mode (e.g. numeric, character, logical)\r\n\r\na <- c(1, 2, 5, -2, 4) # c is combine function\r\na\r\na[4]       #index\r\naa <- a[-4]   # remove element number 4\r\naa\r\n\r\nb <- c(1, 2, 3)\r\nd <- c(TRUE, TRUE, FALSE)\r\nd+1\r\nb*d\r\n\r\n#Matrices = two-dimensional array, where element has the same mode (e.g. numeric, character, logical)\r\ny <- matrix(1:20, nrow=5, ncol=4)\r\ny\r\n\r\ny[,4]+1    #column\r\ny[1,]+1   #row\r\ny[1,4]+1   #row 1, column 4\r\ny[1, c(3,4)]\r\ny+1\r\n\r\n#Arrays = similar to matrices but >2 dimensions\r\n#mydata <- array(vector, dimensions, dimnames)\r\n#3-dimensions (2,3,4) \r\n# vector of 1:24\r\n \r\ndim1 <- c(\"r1\", \"r2\")\r\ndim2 <- c(\"c1\", \"c2\", \"c3\")\r\ndim3 <- c(\"s1\", \"s2\", \"s3\", \"s4\")\r\nmydata <- array(1:24, c(2,3,4),     #2 rows, 3 columns, 4 arrays\r\n  dimnames=list(dim1, dim2, dim3))\r\nmydata\r\nmydata[,,4]\r\nmydata[,,4]*2\r\n\r\n#Data frames = columns can contain different modes of data\r\n# mydata2 <- data.frame(co1, col2, col3,...)\r\nvn <- c(3.4, 5.6, 7.8) #numeric\r\nvc <- c(\"Poor\", \"Good\", \"Excellent\") #charecter\r\nvl <- c(TRUE, FALSE, TRUE) #logical\r\nmydata2 <- data.frame(vl, vc, vn)\r\nmydata2\r\nstr(mydata2) \r\nsummary(mydata2)\r\ndd <- mydata2$vn\r\ndd\r\ndd+1\r\nmydata2$vn*2\r\n\r\nmydata2[2,3] #index Row number 2, at column no.3\r\n\r\n#Lists = an ordered collection of objects\r\n#mylist <- list(obj1, obj2,...)\r\ng <- \"My list\"\r\nh <- c(25, 26, 27, 18)\r\nm <- matrix(1:10, nrow = 5)\r\nj <- c(\"one\", \"two\", \"three\")\r\nmylist <-list(title=g, ages=h, m, j)\r\nmylist\r\nmylist[[2]]\r\nmylist[[\"ages\"]]/2\r\nmylist$ages/2\r\nmylist[[2]]*2\r\nmylist[[3]][4,1] \r\n\r\n# Input data to R\r\nExdata <- read.csv(\"Example_DataFrame.csv\", head=TRUE)\r\nsummary(Exdata)\r\n\r\nmean(Exdata$Tnight)\r\nmean(Exdata$Tnight, na.rm=TRUE)\r\n\r\n# create new dataset without missing data  \r\nnewdata <- na.omit(Exdata)\r\nsummary(newdata)\r\n\r\n# useful functions for woring with data objects\r\nhead(newdata, 10) # Lists the first part of the object\r\ntail(newdata) # Lists the last part of the object\r\n\r\ndim(newdata) # dimensions of an object\r\nstr(newdata) #structure of an object\r\nlength(newdata$year) #number of elements\r\nplot(tiger~Tnight, newdata) #iInteger: Numbers that do not contain decimal values\r\nplot(tiger~d2road, newdata)\r\nplot(tiger~factor(habitat), newdata)\r\ntable(newdata$tiger, newdata$habitat)\r\n\r\n# Factors\r\n# -------\r\nchickwts\r\nstr(chickwts)\r\nsummary(chickwts)\r\nchickwts$feed  # This is a 'factor' = categorical variable\r\nplot(weight~feed, data=chickwts) \r\n\r\n?boxplot\r\n\r\n# Ordered\r\nstatus <- c(\"Improved\", \"Good\", \"Poor\")\r\nclass(status)\r\n\r\nast <- factor(status) #alphabetical order\r\nclass(ast)\r\nast\r\n\r\nast2 <- factor(status, levels=c(\"Poor\",   \"Improved\", \"Good\")) \r\nclass(ast2)\r\nast2\r\n\r\n# Packages are collections of R functions, data, and compiled code in a well-defined format\r\n# the directory where packages are stored on your computer is called the library\r\n\r\n# Install packages\r\n#chooseCRANmirror()\r\n# 1 install from local file\r\n#https://cran.r-project.org/src/contrib/Archive/AHMbook/\r\n# AHMbook package\r\n# save at today folder\r\n#-----DO not unzip!------#\r\n\r\n# 2 use function \r\ninstall.packages(\"wiqid\")\r\nlibrary(wiqid)\r\nupdate.packages(wiqid)\r\n\r\n.libPaths() # shows you where your library is located\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2022-06-13T10:14:24+02:00",
    "input_file": "Basic_R.knit.md"
  }
]
